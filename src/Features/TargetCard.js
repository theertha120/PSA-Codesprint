import React, { useState, useEffect } from 'react';
import {
    Box,
    Heading,
    Text,
    Button,
    VStack,
    Modal,
    ModalOverlay,
    ModalContent,
    ModalHeader,
    ModalCloseButton,
    ModalBody,
    ModalFooter,
    Input,
    Checkbox,
    Spinner,
    SimpleGrid,
    useColorModeValue,
    ScaleFade,
    Progress,
} from '@chakra-ui/react';
import { CheckCircleIcon } from '@chakra-ui/icons';
import { TargetForecast } from './TargetForecast';


export const TargetCard = () => {
    const [isOpen, setIsOpen] = useState(false);
    const [selectedSkills, setSelectedSkills] = useState([]);
    const [ambition, setAmbition] = useState('');
    const [simulationResults, setSimulationResults] = useState([]);
    const [isLoading, setIsLoading] = useState(false);

    const Employee_Profiles = useEffect(() => {
    fetch('/sources/Employee_Profiles.json')
        .then((response) => response.json())
        .then((data) => {
        console.log(data);
        });
    }, []);


    const handleOpenModal = () => {
        setIsOpen(true);
    };

    const handleCloseModal = () => {
        setIsOpen(false);
        setSelectedSkills([]);
        setAmbition('');
        setSimulationResults([]);
        setIsLoading(false);
    };

    const handleSkillChange = (event) => {
        const { value, checked } = event.target;
        if (checked) {
            setSelectedSkills((prev) => [...prev, value]);
        } else {
            setSelectedSkills((prev) => prev.filter((skill) => skill !== value));
        }
    };

    const handleSimulate = () => {
        setIsLoading(true);
        setTimeout(() => {
            const results = Employee_Profiles.filter((path) =>
                selectedSkills.includes(path.skill)
            );
            setSimulationResults(results);
            setIsLoading(false);
        }, 2000);
    };

    return (
        <VStack spacing={4} align="stretch">
            <Heading size="lg">Target Forecast</Heading>
            <Text color="gray.600">Personalised growth targets generated by our LLM.</Text>
            <Button color="#3f2182" size="md" onClick={handleOpenModal}>
                Generate Targets
            </Button>

            <Modal isOpen={isOpen} onClose={handleCloseModal} size="full">
                <ModalOverlay />
                <ModalContent bg={useColorModeValue('white', 'gray.800')} borderRadius="lg" boxShadow="lg">
                    <ModalHeader>

                        <Heading size="lg">Generate Targets</Heading>
                        <ModalCloseButton />

                    </ModalHeader>
                    <ModalBody>
                        <TargetForecast />
                    </ModalBody>
                    <ModalFooter>

                    </ModalFooter>
                </ModalContent>
            </Modal>
        </VStack>
    );
};
